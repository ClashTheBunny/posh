;; Analyzed by ClojureScript 1.7.170
{:use-macros {reaction reagent.ratom}, :excludes #{}, :name posh.example, :imports nil, :requires {r reagent.core, reagent.core reagent.core, posh posh.core, posh.core posh.core, d datascript.core, datascript.core datascript.core}, :uses {db-tx posh.core, when-tx posh.core, transact posh.core}, :defs {conn {:name posh.example/conn, :file "resources/public/js/posh/example.cljs", :line 11, :column 1, :end-line 11, :end-column 10, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 11, :column 6, :end-line 11, :end-column 10}}, ents {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 42, :column 7, :end-line 42, :end-column 11, :arglists (quote ([db ids]))}, :name posh.example/ents, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 11, :method-params ([db ids]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 2, :fn-var true, :arglists (quote ([db ids]))}, drunkard-club {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 45, :column 7, :end-line 45, :end-column 20, :arglists (quote ([]))}, :name posh.example/drunkard-club, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 45, :end-line 45, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, person {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 55, :column 7, :end-line 55, :end-column 13, :arglists (quote ([id]))}, :name posh.example/person, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 13, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 55, :end-line 55, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, group {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 63, :column 7, :end-line 63, :end-column 12, :arglists (quote ([group-id]))}, :name posh.example/group, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 12, :method-params ([group-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 1, :fn-var true, :arglists (quote ([group-id]))}, groups {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 90, :column 7, :end-line 90, :end-column 13, :arglists (quote ([]))}, :name posh.example/groups, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 13, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 90, :end-line 90, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, app {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 101, :column 7, :end-line 101, :end-column 10, :arglists (quote ([]))}, :name posh.example/app, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 10, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, start {:protocol-inline nil, :meta {:file "/home/teddy/clojure/posh/examples/drinkers/resources/public/js/posh/example.cljs", :line 107, :column 7, :end-line 107, :end-column 12, :arglists (quote ([]))}, :name posh.example/start, :variadic false, :file "resources/public/js/posh/example.cljs", :end-column 12, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}}, :require-macros {reagent.ratom reagent.ratom}, :cljs.analyzer/constants {:seen #{:find ?a :where :ul :key :li :group/name _ :on-click :person/age :div $ :person/name :person/group >= :db/id :db/add :group/sort-by ... ?p ?g ?id :in}, :order [:db/id :group/name :group/sort-by :person/name :person/age :find ?g ... :where _ :person/group ?p ?a >= :div :ul :li :key :on-click :db/add :in $ ?id]}, :doc nil}